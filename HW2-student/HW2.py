# HW2
# Name: Yang An
# Collaborators: None
# Date: 04/07/2024

import random

def count_characters(s):
    """
    Count the number of times each character appears in the input string.

    Args:
    s (str): The string to be analyzed.

    Returns:
    dict: A dictionary where the keys are characters and the values are the counts of those characters in the string.
    """
    count_dict = {}
    for char in s:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1
    return count_dict

#count_characters("Torto ise!")
# Assuming 's' contains the content of "Emma"
#emma_counts = count_characters(s)
#t_count = emma_counts.get('t', 0)
#exclamation_count = emma_counts.get('!', 0)
#unique_characters = len(emma_counts)
#print(f"The letter 't' appears {t_count} times in Emma.")
#print(f"The exclamation mark '!' appears {exclamation_count} times in Emma.")
#print(f"There are {unique_characters} different types of characters in Emma.")

def count_ngrams(s, n=1):
    """
    Count the occurrences of each n-gram in the input string.

    Args:
    s (str): The string to be analyzed.
    n (int): The size of the n-gram (default is 1).

    Returns:
    dict: A dictionary where the keys are n-grams and the values are the counts of those n-grams in the string.
    """
    count_dict = {}
    for i in range(len(s) - n + 1):
        ngram = s[i:i+n]
        if ngram in count_dict:
            count_dict[ngram] += 1
        else:
            count_dict[ngram] = 1
    return count_dict

#count_ngrams("tortoise", n=2)
#ngram_counts = count_ngrams("tortoise", n=2)
#unique_ngrams = len(ngram_counts)
#print(f"There are {unique_ngrams} different types of 2-grams in the dictionary.")

def markov_text(s, n, length, seed):
    """
    Generates text using an n-th order Markov model based on the input string.

    Args:
    s (str): The source text for generating the Markov model.
    n (int): The order of the model, corresponding to the size of the n-gram.
    length (int): The length of the text to generate.
    seed (str): The initial string used to start text generation.

    Returns:
    str: A string generated by the Markov model.
    """
    ngrams = count_ngrams(s, n + 1)
    current = seed[-n:]
    output = seed

    for _ in range(length):
        options = [key for key in ngrams if key.startswith(current)]
        if not options:
            break
        weights = [ngrams[option] for option in options]
        next_ngram = random.choices(options, weights)[0]
        next_char = next_ngram[-1]
        output += next_char
        current = output[-n:]

    return output

#print(markov_text(s, n=2, length=200, seed="Emma Woodhouse"))
#print(markov_text(s, n=4, length=200, seed="Emma Woodhouse"))
#print(markov_text(s, n=10, length=200, seed="Emma Woodhouse"))

